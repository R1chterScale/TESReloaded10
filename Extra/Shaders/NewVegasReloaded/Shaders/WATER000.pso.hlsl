//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

// autowater surface shader (closeup, no wading displacement)

float4 EyePos : register(c1);
float4 ShallowColor : register(c2);
float4 DeepColor : register(c3);
float4 ReflectionTint : register(c4);
float4 FresnelRI : register(c5); //x: fresnel power, y:specular, w: reflectivity
float4 VarAmounts : register(c8); // x: water glossiness
float4 FogParam : register(c9);
float4 FogColor : register(c10);
float2 DepthFalloff : register(c11); // start / end depth fog
float4 SunDir : register(c12);
float4 SunColor : register(c13);
float4 TESR_WaveParams : register(c14); // x: choppiness, y:wave width, z: wave speed, w: reflectivity?
float4 TESR_WaterVolume : register(c15); // x: caustic strength, y:shoreFactor, w: turbidity, z: caustic strength S ?

sampler2D ReflectionMap : register(s0);
sampler2D RefractionMap : register(s1);
sampler2D NoiseMap : register(s2);
sampler2D DepthMap : register(s4);

// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   EyePos          const_1       1
//   ShallowColor    const_2       1
//   DeepColor       const_3       1
//   ReflectionColor const_4       1
//   FresnelRI       const_5       1
//   VarAmounts      const_8       1
//   FogParam        const_9       1
//   FogColor        const_10      1
//   DepthFalloff    const_11      1
//   SunDir          const_12      1
//   SunColor        const_13      1
//   ReflectionMap   texture_0       1
//   RefractionMap   texture_1       1
//   NoiseMap        texture_2       1
//   DepthMap        texture_4       1
//


// Structures:

struct VS_INPUT {
    float4 LTEXCOORD_0 : TEXCOORD0_centroid;     // world position of underwater points
    float4 LTEXCOORD_1 : TEXCOORD1_centroid;
    float4 LTEXCOORD_2 : TEXCOORD2_centroid;     // modelviewproj matrix 1st row 
    float4 LTEXCOORD_3 : TEXCOORD3_centroid;     // modelviewproj matrix 2nd row 
    float4 LTEXCOORD_4 : TEXCOORD4_centroid;     // modelviewproj matrix 3rd row 
    float4 LTEXCOORD_5 : TEXCOORD5_centroid;     // modelviewproj matrix 4th row 
    float4 LTEXCOORD_6 : TEXCOORD6;
    float2 LTEXCOORD_7 : TEXCOORD7;              // waves sampling position
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)  // from 0/1 to -1/1
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)	saturate(dot(n, l))

    const float4 const_14 = {-0.569999993, 0.819999993, 0, 100}; // used by specular/glossiness
    const int4 const_7 = {0, 2, -1, 1}; // used to cancel/double/invert vector components

	float choppiness = TESR_WaveParams.x;
	float waveWidth = TESR_WaveParams.y;
	float reflectivity = TESR_WaveParams.w;
	float turbidity = TESR_WaterVolume.z;

    float4 screenPos;  // point coordinates in screen space for water surface
    screenPos.x = dot(IN.LTEXCOORD_2, IN.LTEXCOORD_1);
    screenPos.w = dot(IN.LTEXCOORD_5, IN.LTEXCOORD_1);
    screenPos.y = screenPos.w - dot(IN.LTEXCOORD_3, IN.LTEXCOORD_1);
    screenPos.z = dot(IN.LTEXCOORD_4, IN.LTEXCOORD_1);
    
    float3 eyeVector = EyePos.xyz - IN.LTEXCOORD_0.xyz;   // vector of camera position to point being shaded
    float3 eyeDirection = normalize(eyeVector);           // normalized eye to world vector (for lighting)
    float distance = length(eyeVector.xy);                // surface distance to eye
    float depth = length(eyeVector);                      // depth distance to eye

    // distance fade
    float2 fadeCoeffs = {4096, 0.000244140625}; // 4096, 1/4096;
    float LODfade = saturate(1 - ((distance - fadeCoeffs.x) * fadeCoeffs.y));

    // calculate fog coeffs
    float2 waterDepth = tex2Dproj(DepthMap, screenPos).xy;  // x= shallowfog, y = deepfog?
    float2 fadedDepth = saturate(lerp(waterDepth * turbidity, 1, 1 - LODfade));
    float2 depths = float2(fadedDepth.y + depth, depth); // deepfog
    depths = saturate((FogParam.x - depths) / FogParam.y); 
    float depthFog = saturate((waterDepth.y - DepthFalloff.x) / (DepthFalloff.y - DepthFalloff.x));

    // sample waves texture and generate normals from it
    float4 waveTexture = tex2D(NoiseMap, IN.LTEXCOORD_7.xy * waveWidth);
    waveTexture.xyz = (depthFog * expand(waveTexture.xyz) * choppiness) + const_7.xxw; //{0, 0, 1};
    waveTexture.xy = LODfade * waveTexture.xy;
    float3 surfaceNormal = normalize(waveTexture.xyz);

    // get position for sampling reflections/refractions
    float q60 = (waterDepth.y * depthFog * turbidity) * ((saturate(distance * 0.0002) * (-4 + VarAmounts.w)) + 4);
    waveTexture.xy = ((q60 * surfaceNormal.xy) / IN.LTEXCOORD_0.w) + IN.LTEXCOORD_1.xy;
    waveTexture.zw = (IN.LTEXCOORD_1.z * const_7.wx) + const_7.xw; // const_7 = {0, 2, -1, 1};

    float4 reflectionPos = mul(float4x4(IN.LTEXCOORD_2, IN.LTEXCOORD_3, IN.LTEXCOORD_4, IN.LTEXCOORD_5), waveTexture); // convert local normal to view space

    // render refractions
    float4 refractionPos = reflectionPos;
    refractionPos.y = refractionPos.w - reflectionPos.y;
    float refractionFog = pow(abs(1 - depths.x), FresnelRI.y);

    float3 color = tex2Dproj(RefractionMap, refractionPos).rgb;
    color = (color - (refractionFog * FogColor.rgb)) / (1 - (refractionFog - 9.99999975e-005));

    // add deep color fog
	float3 waterColor = (fadedDepth.y * (DeepColor.rgb - ShallowColor.rgb)) + ShallowColor.rgb;
	color += (fadedDepth.y * (waterColor - color));

    // add shallow depth color
    float fogCoeff = 1 - saturate((FogParam.z - (fadedDepth.x * FogParam.z)) / FogParam.w);
 	float x = depthFog * (fogCoeff * FogColor.a);
	color += (x * (waterColor - color));

    // reflections using fresnel
    float3 reflection = tex2Dproj(ReflectionMap, reflectionPos);
    float3 reflectionColor = (VarAmounts.y * (reflection - ReflectionTint.rgb)) + ReflectionTint.rgb;
    float fresnelCoeff = 1 - shades(eyeDirection, surfaceNormal);
	color += ((fadedDepth.y * 0.5 * lerp(FresnelRI.x, 1, pow(fresnelCoeff, 5))) * ((reflectionColor * reflectivity * FresnelRI.w) - color));

    //specular highlights
    float specular = pow(abs(shades(reflect(-eyeDirection, surfaceNormal), SunDir.xyz)), VarAmounts.x); // specular ^ glossiness
    float scattering = pow(abs(saturate(dot(surfaceNormal.xz, const_14.xy))), 100); // const_14 = {-0.569999993, 0.819999993} not sure what this component does
    color += (SunDir.w * ((specular + scattering) * SunColor.rgb));

    // unused? looks like diffuse lighting? 
    float2 diffuseCoeff = {4, 1};
    float diffuse = shades(normalize(diffuseCoeff.yxy * SunDir.xyz), surfaceNormal); 
    // color += diffuse;

    color += (pow(abs(1 - depths.y), FresnelRI.y) * (FogColor.rgb - color)); // not sure what that is, far fog fading for surface?

    OUT.color_0.a = IN.LTEXCOORD_6.w;
    OUT.color_0.rgb = color;

    return OUT;
};